diff --git a/i3lock.c b/i3lock.c
index e855a75..3714191 100644
--- a/i3lock.c
+++ b/i3lock.c
@@ -57,7 +57,16 @@
 typedef void (*ev_callback_t)(EV_P_ ev_timer *w, int revents);
 static void input_done(void);
 
-char color[7] = "ffffff";
+// Color options
+char color[7] = "ffffff"; // background
+char verifycolor[7] = "00ff00"; // verify
+char wrongcolor[7] = "ff0000"; // wrong
+char idlecolor[7] = "000000"; // idle
+
+// Time format
+bool use24hour = false;
+
+int inactivity_timeout = 30;
 uint32_t last_resolution[2];
 xcb_window_t win;
 static xcb_cursor_t cursor;
@@ -1004,6 +1013,19 @@ static void raise_loop(xcb_window_t window) {
     }
 }
 
+bool verify_hex(char *arg, char *color_type, char *varname) {
+    /* Skip # if present */
+    if (arg[0] == '#')
+        arg++;
+
+    if (strlen(arg) != 6 || sscanf(arg, "%06[0-9a-fA-F]", color_type) != 1) {
+        errx(EXIT_FAILURE, "%s is invalid, it must be given in 3-byte hexadecimal format: rrggbb\n", varname);
+        return false;
+    }
+
+    return true;
+}
+
 int main(int argc, char *argv[]) {
     struct passwd *pw;
     char *username;
@@ -1032,6 +1054,10 @@ int main(int argc, char *argv[]) {
         {"ignore-empty-password", no_argument, NULL, 'e'},
         {"inactivity-timeout", required_argument, NULL, 'I'},
         {"show-failed-attempts", no_argument, NULL, 'f'},
+        {"verify-color", required_argument, NULL, 'o'},
+        {"wrong-color", required_argument, NULL, 'w'},
+        {"idle-color", required_argument, NULL, 'l'},
+        {"24", no_argument, NULL, '4'},
         {NULL, no_argument, NULL, 0}};
 
     if ((pw = getpwuid(getuid())) == NULL)
@@ -1041,7 +1067,7 @@ int main(int argc, char *argv[]) {
     if (getenv("WAYLAND_DISPLAY") != NULL)
         errx(EXIT_FAILURE, "i3lock is a program for X11 and does not work on Wayland. Try https://github.com/swaywm/swaylock instead");
 
-    char *optstring = "hvnbdc:p:ui:teI:f";
+    char *optstring = "hvnbdc:o:w:l:p:ui:teI:f";
     while ((o = getopt_long(argc, argv, optstring, longopts, &longoptind)) != -1) {
         switch (o) {
             case 'v':
@@ -1059,18 +1085,21 @@ int main(int argc, char *argv[]) {
                 fprintf(stderr, "Inactivity timeout only makes sense with DPMS, which was removed. Please see the manpage i3lock(1).\n");
                 break;
             }
-            case 'c': {
-                char *arg = optarg;
-
-                /* Skip # if present */
-                if (arg[0] == '#')
-                    arg++;
-
-                if (strlen(arg) != 6 || sscanf(arg, "%06[0-9a-fA-F]", color) != 1)
-                    errx(EXIT_FAILURE, "color is invalid, it must be given in 3-byte hexadecimal format: rrggbb");
-
+            case 'c':
+                verify_hex(optarg, color, "color");
+                break;
+            case 'o':
+                verify_hex(optarg, verifycolor, "verifycolor");
+                break;
+            case 'w':
+                verify_hex(optarg, wrongcolor, "wrongcolor");
+                break;
+            case 'l':
+                verify_hex(optarg, idlecolor, "idlecolor");
+                break;
+            case '4':
+                use24hour = true;
                 break;
-            }
             case 'u':
                 unlock_indicator = false;
                 break;
@@ -1102,8 +1131,8 @@ int main(int argc, char *argv[]) {
                 show_failed_attempts = true;
                 break;
             default:
-                errx(EXIT_FAILURE, "Syntax: i3lock [-v] [-n] [-b] [-d] [-c color] [-u] [-p win|default]"
-                                   " [-i image.png] [-t] [-e] [-I timeout] [-f]");
+                errx(EXIT_FAILURE, "Syntax: i3lock [-v] [-n] [-b] [-d] [-c color] [-o color] [-w color] [-l color] [-u] [-p win|default]"
+                                   " [-i image.png] [-t] [-e] [-I timeout] [-f] [--24]");
         }
     }
 
@@ -1297,6 +1326,7 @@ int main(int argc, char *argv[]) {
      * received up until now. ev will only pick up new events (when the X11
      * file descriptor becomes readable). */
     ev_invoke(main_loop, xcb_check, 0);
+    start_time_redraw_tick(main_loop);
     ev_loop(main_loop, 0);
 
 #ifndef __OpenBSD__
diff --git a/pam/i3lock b/pam/i3lock
index 6eb8e68..97b6cbb 100644
--- a/pam/i3lock
+++ b/pam/i3lock
@@ -1,6 +1,6 @@
 #
 # PAM configuration file for the i3lock screen locker. By default, it includes
-# the 'login' configuration file (see /etc/pam.d/login)
+# the 'system-auth' configuration file (see /etc/pam.d/system-auth)
 #
 
-auth include login
+auth include system-auth
diff --git a/unlock_indicator.c b/unlock_indicator.c
index b677a90..dce2f6c 100644
--- a/unlock_indicator.c
+++ b/unlock_indicator.c
@@ -15,6 +15,7 @@
 #include <ev.h>
 #include <cairo.h>
 #include <cairo/cairo-xcb.h>
+#include <time.h>
 
 #include "i3lock.h"
 #include "xcb.h"
@@ -22,14 +23,17 @@
 #include "randr.h"
 #include "dpi.h"
 
-#define BUTTON_RADIUS 90
+#define BUTTON_RADIUS 100
 #define BUTTON_SPACE (BUTTON_RADIUS + 5)
 #define BUTTON_CENTER (BUTTON_RADIUS + 5)
 #define BUTTON_DIAMETER (2 * BUTTON_SPACE)
+#define TIME_FORMAT_12 "%I:%M:%S %p"
+#define TIME_FORMAT_24 "%T"
 
 /*******************************************************************************
  * Variables defined in i3lock.c.
  ******************************************************************************/
+static struct ev_periodic *time_redraw_tick;
 
 extern bool debug_mode;
 
@@ -57,6 +61,18 @@ extern bool tile;
 /* The background color to use (in hex). */
 extern char color[7];
 
+/* Verify color to use (in hex). */
+extern char verifycolor[7];
+
+/* Wrong/Error color to use (in hex). */
+extern char wrongcolor[7];
+
+/* Idle color to use (in hex). */
+extern char idlecolor[7];
+
+/* Use 24 hour time format */
+extern bool use24hour;
+
 /* Whether the failed attempts should be displayed. */
 extern bool show_failed_attempts;
 /* Number of failed unlock attempts. */
@@ -81,6 +97,102 @@ static xcb_visualtype_t *vistype;
 unlock_state_t unlock_state;
 auth_state_t auth_state;
 
+// Creates color array from command line arguments
+uint32_t *color_array(char *colorarg) {
+    uint32_t *rgb16 = malloc(sizeof(uint32_t) * 3);
+
+    char strgroups[3][3] = {
+        {colorarg[0], colorarg[1], '\0'},
+        {colorarg[2], colorarg[3], '\0'},
+        {colorarg[4], colorarg[5], '\0'}
+    };
+
+    for (int i = 0; i < 3; ++i) {
+        rgb16[i] = strtol(strgroups[i], NULL, 16);
+    }
+
+    return rgb16;
+}
+
+void set_color(cairo_t *cr, char *colorarg, char colortype) {
+    uint32_t *rgb16 = color_array(colorarg);
+
+    switch(colortype) {
+        case 'b': // background
+            cairo_set_source_rgb(cr, rgb16[0] / 255.0, rgb16[1] / 255.0, rgb16[2] / 255.0);
+            break;
+        case 'l': // line and text
+            cairo_set_source_rgba(cr, rgb16[0] / 255.0, rgb16[1] / 255.0, rgb16[2] / 255.0, .8);
+            break;
+        case 'f': // fill
+            for (int i = 0; i < 3; ++i) {
+                rgb16[i] = ((255 - rgb16[i]) * .5) + rgb16[i];
+            }
+            cairo_set_source_rgba(cr, rgb16[0] / 255.0, rgb16[1] / 255.0, rgb16[2] / 255.0, .2);
+            break;
+    }
+
+    free(rgb16);
+}
+
+void set_auth_color(cairo_t *cr, char colortype) {
+    switch(auth_state) {
+        case STATE_AUTH_VERIFY:
+            set_color(cr, verifycolor, colortype);
+            break;
+        case STATE_AUTH_LOCK:
+            set_color(cr, idlecolor, colortype);
+            break;
+        case STATE_AUTH_WRONG:
+        case STATE_I3LOCK_LOCK_FAILED:
+            set_color(cr, wrongcolor, colortype);
+            break;
+        case STATE_AUTH_IDLE:
+            if (unlock_state == STATE_BACKSPACE_ACTIVE) { // STATE_NOTHING_TO_DELETE
+                set_color(cr, wrongcolor, colortype);
+            } else {
+                set_color(cr, idlecolor, colortype);
+            }
+            break;
+    }
+}
+
+void get_display_string(char *buf, int length) {
+    switch (auth_state) {
+        case STATE_AUTH_VERIFY:
+            strncpy(buf, "Verifying…", length);
+            break;
+        case STATE_AUTH_LOCK:
+            strncpy(buf, "Locking…", length);
+            break;
+        case STATE_AUTH_WRONG:
+            strncpy(buf, "Wrong!", length);
+            break;
+        case STATE_I3LOCK_LOCK_FAILED:
+            strncpy(buf, "Lock failed!", length);
+            break;
+        default:
+            if (unlock_state == STATE_NOTHING_TO_DELETE) {
+                strncpy(buf, "No input", length);
+            } else {
+                time_t curtime = time(NULL);
+                struct tm *tm = localtime(&curtime);
+                strftime(buf, length, use24hour ? TIME_FORMAT_24 : TIME_FORMAT_12, tm);
+            }
+            break;
+    }
+}
+
+void get_failed_tries_string(char *buf, int length, int number_length) {
+    if (show_failed_attempts && failed_attempts > 0) {
+        if (failed_attempts > 999) {
+            strncpy(buf, "> 999", length);
+        } else {
+            snprintf(buf, number_length, "%d", failed_attempts);
+        }
+    }
+}
+
 /*
  * Draws global image with fill color onto a pixmap with the given
  * resolution and returns it.
@@ -107,13 +219,7 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
     /* After the first iteration, the pixmap will still contain the previous
      * contents. Explicitly clear the entire pixmap with the background color
      * first to get back into a defined state: */
-    char strgroups[3][3] = {{color[0], color[1], '\0'},
-                            {color[2], color[3], '\0'},
-                            {color[4], color[5], '\0'}};
-    uint32_t rgb16[3] = {(strtol(strgroups[0], NULL, 16)),
-                         (strtol(strgroups[1], NULL, 16)),
-                         (strtol(strgroups[2], NULL, 16))};
-    cairo_set_source_rgb(xcb_ctx, rgb16[0] / 255.0, rgb16[1] / 255.0, rgb16[2] / 255.0);
+    set_color(xcb_ctx, color, 'b');
     cairo_rectangle(xcb_ctx, 0, 0, resolution[0], resolution[1]);
     cairo_fill(xcb_ctx);
 
@@ -133,11 +239,10 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
         }
     }
 
-    if (unlock_indicator &&
-        (unlock_state >= STATE_KEY_PRESSED || auth_state > STATE_AUTH_IDLE)) {
+    if (unlock_indicator) {
         cairo_scale(ctx, scaling_factor, scaling_factor);
         /* Draw a (centered) circle with transparent background. */
-        cairo_set_line_width(ctx, 10.0);
+        cairo_set_line_width(ctx, 3.0);
         cairo_arc(ctx,
                   BUTTON_CENTER /* x */,
                   BUTTON_CENTER /* y */,
@@ -146,109 +251,54 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
                   2 * M_PI /* end */);
 
         /* Use the appropriate color for the different PAM states
-         * (currently verifying, wrong password, or default) */
-        switch (auth_state) {
-            case STATE_AUTH_VERIFY:
-            case STATE_AUTH_LOCK:
-                cairo_set_source_rgba(ctx, 0, 114.0 / 255, 255.0 / 255, 0.75);
-                break;
-            case STATE_AUTH_WRONG:
-            case STATE_I3LOCK_LOCK_FAILED:
-                cairo_set_source_rgba(ctx, 250.0 / 255, 0, 0, 0.75);
-                break;
-            default:
-                if (unlock_state == STATE_NOTHING_TO_DELETE) {
-                    cairo_set_source_rgba(ctx, 250.0 / 255, 0, 0, 0.75);
-                    break;
-                }
-                cairo_set_source_rgba(ctx, 0, 0, 0, 0.75);
-                break;
-        }
+         * (currently verifying, wrong password, or idle) */
+        set_auth_color(ctx, 'f');
         cairo_fill_preserve(ctx);
 
-        switch (auth_state) {
-            case STATE_AUTH_VERIFY:
-            case STATE_AUTH_LOCK:
-                cairo_set_source_rgb(ctx, 51.0 / 255, 0, 250.0 / 255);
-                break;
-            case STATE_AUTH_WRONG:
-            case STATE_I3LOCK_LOCK_FAILED:
-                cairo_set_source_rgb(ctx, 125.0 / 255, 51.0 / 255, 0);
-                break;
-            case STATE_AUTH_IDLE:
-                if (unlock_state == STATE_NOTHING_TO_DELETE) {
-                    cairo_set_source_rgb(ctx, 125.0 / 255, 51.0 / 255, 0);
-                    break;
-                }
-
-                cairo_set_source_rgb(ctx, 51.0 / 255, 125.0 / 255, 0);
-                break;
-        }
+        set_auth_color(ctx, 'l');
         cairo_stroke(ctx);
 
-        /* Draw an inner seperator line. */
-        cairo_set_source_rgb(ctx, 0, 0, 0);
-        cairo_set_line_width(ctx, 2.0);
-        cairo_arc(ctx,
-                  BUTTON_CENTER /* x */,
-                  BUTTON_CENTER /* y */,
-                  BUTTON_RADIUS - 5 /* radius */,
-                  0,
-                  2 * M_PI);
-        cairo_stroke(ctx);
+        /* Display Time */
+        char *text = malloc(15);
+        text[0] = '\0';
+        get_display_string(text, 15);
 
-        cairo_set_line_width(ctx, 10.0);
+        set_auth_color(ctx, 'l');
+        cairo_select_font_face(ctx, "sans-serif", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
+        cairo_set_font_size(ctx, 32.0);
 
-        /* Display a (centered) text of the current PAM state. */
-        char *text = NULL;
-        /* We don't want to show more than a 3-digit number. */
-        char buf[4];
+        cairo_text_extents_t time_extents;
+        double x, y;
 
-        cairo_set_source_rgb(ctx, 0, 0, 0);
-        cairo_select_font_face(ctx, "sans-serif", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
-        cairo_set_font_size(ctx, 28.0);
-        switch (auth_state) {
-            case STATE_AUTH_VERIFY:
-                text = "Verifying…";
-                break;
-            case STATE_AUTH_LOCK:
-                text = "Locking…";
-                break;
-            case STATE_AUTH_WRONG:
-                text = "Wrong!";
-                break;
-            case STATE_I3LOCK_LOCK_FAILED:
-                text = "Lock failed!";
-                break;
-            default:
-                if (unlock_state == STATE_NOTHING_TO_DELETE) {
-                    text = "No input";
-                }
-                if (show_failed_attempts && failed_attempts > 0) {
-                    if (failed_attempts > 999) {
-                        text = "> 999";
-                    } else {
-                        snprintf(buf, sizeof(buf), "%d", failed_attempts);
-                        text = buf;
-                    }
-                    cairo_set_source_rgb(ctx, 1, 0, 0);
-                    cairo_set_font_size(ctx, 32.0);
-                }
-                break;
-        }
+        cairo_text_extents(ctx, text, &time_extents);
+        x = BUTTON_CENTER - ((time_extents.width / 2) + time_extents.x_bearing);
+        y = BUTTON_CENTER - ((time_extents.height / 2) + time_extents.y_bearing);
 
-        if (text) {
-            cairo_text_extents_t extents;
-            double x, y;
+        cairo_move_to(ctx, x, y);
+        cairo_show_text(ctx, text);
+        cairo_close_path(ctx);
 
-            cairo_text_extents(ctx, text, &extents);
-            x = BUTTON_CENTER - ((extents.width / 2) + extents.x_bearing);
-            y = BUTTON_CENTER - ((extents.height / 2) + extents.y_bearing);
+        free(text);
 
-            cairo_move_to(ctx, x, y);
-            cairo_show_text(ctx, text);
-            cairo_close_path(ctx);
-        }
+        /* Display Failed Tries */
+        text = malloc(6);
+        text[0] = '\0';
+        get_failed_tries_string(text, 6, 4);
+
+        set_color(ctx, wrongcolor, 'l');
+        cairo_set_font_size(ctx, 24.0);
+
+        cairo_text_extents_t tries_extents;
+
+        cairo_text_extents(ctx, text, &tries_extents);
+        x = BUTTON_CENTER - ((tries_extents.width / 2) + tries_extents.x_bearing);
+        y = BUTTON_CENTER + 8 + (time_extents.height / 2) - time_extents.y_bearing; // display under time
+
+        cairo_move_to(ctx, x, y);
+        cairo_show_text(ctx, text);
+        cairo_close_path(ctx);
+
+        free(text);
 
         if (auth_state == STATE_AUTH_WRONG && (modifier_string != NULL)) {
             cairo_text_extents_t extents;
@@ -270,6 +320,7 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
          * keypress. */
         if (unlock_state == STATE_KEY_ACTIVE ||
             unlock_state == STATE_BACKSPACE_ACTIVE) {
+            cairo_set_line_width(ctx, 4.0);
             cairo_new_sub_path(ctx);
             double highlight_start = (rand() % (int)(2 * M_PI * 100)) / 100.0;
             cairo_arc(ctx,
@@ -277,19 +328,19 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
                       BUTTON_CENTER /* y */,
                       BUTTON_RADIUS /* radius */,
                       highlight_start,
-                      highlight_start + (M_PI / 3.0));
-            if (unlock_state == STATE_KEY_ACTIVE) {
-                /* For normal keys, we use a lighter green. */
-                cairo_set_source_rgb(ctx, 51.0 / 255, 219.0 / 255, 0);
-            } else {
-                /* For backspace, we use red. */
-                cairo_set_source_rgb(ctx, 219.0 / 255, 51.0 / 255, 0);
-            }
+                      highlight_start + (M_PI / 2.5));
+            /* Set newly drawn lines to erase what they're drawn over */
+            cairo_set_operator(ctx, CAIRO_OPERATOR_CLEAR);
             cairo_stroke(ctx);
 
-            /* Draw two little separators for the highlighted part of the
-             * unlock indicator. */
-            cairo_set_source_rgb(ctx, 0, 0, 0);
+            /* Back to normal operator */
+            cairo_set_operator(ctx, CAIRO_OPERATOR_OVER);
+            cairo_set_line_width(ctx, 10.0);
+
+            /* Change color of separators based on backspace/active keypress */
+            set_auth_color(ctx, 'l');
+
+            /* Separator 1 */
             cairo_arc(ctx,
                       BUTTON_CENTER /* x */,
                       BUTTON_CENTER /* y */,
@@ -297,12 +348,14 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
                       highlight_start /* start */,
                       highlight_start + (M_PI / 128.0) /* end */);
             cairo_stroke(ctx);
+
+            /* Separator 2 */
             cairo_arc(ctx,
                       BUTTON_CENTER /* x */,
                       BUTTON_CENTER /* y */,
                       BUTTON_RADIUS /* radius */,
-                      (highlight_start + (M_PI / 3.0)) - (M_PI / 128.0) /* start */,
-                      highlight_start + (M_PI / 3.0) /* end */);
+                      highlight_start + (M_PI / 2.5) /* start */,
+                      (highlight_start + (M_PI / 2.5)) + (M_PI / 128.0) /* end */);
             cairo_stroke(ctx);
         }
     }
@@ -365,14 +418,30 @@ void redraw_screen(void) {
 }
 
 /*
- * Hides the unlock indicator completely when there is no content in the
- * password buffer.
- *
+ * Always show unlock indicator.
  */
 void clear_indicator(void) {
-    if (input_position == 0) {
-        unlock_state = STATE_STARTED;
-    } else
-        unlock_state = STATE_KEY_PRESSED;
+    unlock_state = STATE_KEY_PRESSED;
+    redraw_screen();
+}
+
+/* Periodic redraw for clock updates - taken from github.com/ravinrabbid/i3lock-clock */
+
+static void time_redraw_cb(struct ev_loop *loop, ev_periodic *w, int revents) {
     redraw_screen();
 }
+
+void start_time_redraw_tick(struct ev_loop* main_loop) {
+    if (time_redraw_tick) {
+        ev_periodic_set(time_redraw_tick, 1.0, 1., 0);
+        ev_periodic_again(main_loop, time_redraw_tick);
+    } else {
+        /* When there is no memory, we just don’t have a timeout. We cannot
+        * exit() here, since that would effectively unlock the screen. */
+        if (!(time_redraw_tick = calloc(sizeof(struct ev_periodic), 1))) {
+            return;
+        }
+        ev_periodic_init(time_redraw_tick, time_redraw_cb, 1.0, 1., 0);
+        ev_periodic_start(main_loop, time_redraw_tick);
+    }
+}
diff --git a/unlock_indicator.h b/unlock_indicator.h
index 581d028..1cb3c26 100644
--- a/unlock_indicator.h
+++ b/unlock_indicator.h
@@ -24,6 +24,7 @@ typedef enum {
 void free_bg_pixmap(void);
 void draw_image(xcb_pixmap_t bg_pixmap, uint32_t* resolution);
 void redraw_screen(void);
+void start_time_redraw_tick(struct ev_loop* main_loop);
 void clear_indicator(void);
 
 #endif
